plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"

    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.torrydo.weathervisualizer"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {

        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")

    def kotlinx_cotest_version = "1.6.1"
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_cotest_version")
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_cotest_version")
    def google_truth_version = "1.1.3"
    testImplementation("com.google.truth:truth:$google_truth_version")
    androidTestImplementation("com.google.truth:truth:$google_truth_version")

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    implementation "dev.shreyaspatil:capturable:1.0.3"


    android_libs()
    kotlin_libs()
    compose_libs()
    accompanist()
    coroutines()
    data_store()

    google_maps_api()
    orbit_mvi()
    koin()
    ktor()
    coil()
    lottieFiles()

    my_libs()

}

private void android_libs() {
    dependencies.implementation 'com.google.android.gms:play-services-location:21.0.0'
}

private void kotlin_libs() {
    def serialization_version = "1.4.1"
    dependencies.implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
}

private void compose_libs() {
    dependencies.implementation("androidx.compose.material:material-icons-extended:$compose_version")
}

private void accompanist() {
    def accompanist_version = "0.27.0"
    dependencies.implementation("com.google.accompanist:accompanist-permissions:$accompanist_version")
    dependencies.implementation("com.google.accompanist:accompanist-navigation-animation:$accompanist_version")
}

private void google_maps_api() {
    dependencies.implementation 'com.google.maps.android:maps-compose:2.7.2'
    dependencies.implementation 'com.google.android.gms:play-services-maps:18.1.0'

//    dependencies.implementation 'com.google.android.libraries.places:places:2.6.0'

//    // KTX for the Maps SDK for Android library
//    dependencies.implementation 'com.google.maps.android:maps-ktx:3.4.0'
//
//    // KTX for the Maps SDK for Android Utility Library
//    dependencies.implementation 'com.google.maps.android:maps-utils-ktx:3.4.0'
}

private void orbit_mvi() {
    def orbit_version = "4.4.0"
    dependencies.implementation("org.orbit-mvi:orbit-viewmodel:$orbit_version")
    dependencies.implementation("org.orbit-mvi:orbit-compose:$orbit_version")
    dependencies.testImplementation("org.orbit-mvi:orbit-test:$orbit_version")
}

private void data_store() {
    dependencies.implementation("androidx.datastore:datastore-preferences:1.0.0")
}

private void coroutines() {
    def coroutine_version = "1.6.4"
    dependencies.implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version")
    dependencies.implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version")
}

private void lottieFiles() {
    def lottie_version = "5.0.3"
    dependencies.implementation("com.airbnb.android:lottie-compose:$lottie_version")
}

private void koin() {
    def koin_version = "3.1.6"
    dependencies.implementation("io.insert-koin:koin-android:$koin_version")
    dependencies.implementation("io.insert-koin:koin-androidx-compose:$koin_version")
}

private void ktor() {
    def ktor_version = "2.1.2"
    dependencies.implementation("io.ktor:ktor-client-core:$ktor_version")
    dependencies.implementation("io.ktor:ktor-client-cio:$ktor_version")
}

private void coil() {
    def coil_version = "2.2.2"
    dependencies.implementation("io.coil-kt:coil-compose:$coil_version")
}

private void my_libs() {
    dependencies.implementation("io.github.torrydo:compose-easier:0.0.2")
}